@page "/articles"
@inject HttpClient Http
@inject IJSRuntime JS
@inject NavigationManager NavigationManager
@using Shared.Models

<h3>Articles</h3>

@if (isLoading)
{
    <p><em>Loading...</em></p>
}
else if (error != null)
{
    <div class="alert alert-danger">@error</div>
}
else if (articles == null || !articles.Any())
{
    <p>No articles found.</p>
}
else
{
    <div class="row">
        @foreach (var article in articles)
        {
            <div class="col-md-4 mb-4">
                <div class="card h-100">
                    @if (!string.IsNullOrEmpty(article.ImageUrl))
                    {
                        <img src="@article.ImageUrl" class="card-img-top" alt="@article.Libelle" 
                             style="height: 200px; object-fit: cover; cursor: pointer;"
                             @onclick="() => CreateReclamation(article.Id)" />
                    }
                    else
                    {
                        <div class="card-img-top bg-light d-flex align-items-center justify-content-center" 
                             style="height: 200px; cursor: pointer;"
                             @onclick="() => CreateReclamation(article.Id)">
                            <span class="text-muted">Pas d'image</span>
                        </div>
                    }
                    <div class="card-body">
                        <h5 class="card-title">@article.Libelle</h5>
                        <p class="card-text">
                            <strong>Prix:</strong> @article.Prix.ToString("C")<br>
                            <strong>Sous Garantie:</strong> @(article.EstSousGarantie ? "Oui" : "Non")
                        </p>
                        <button class="btn btn-primary w-100" @onclick="() => CreateReclamation(article.Id)">
                            Créer une réclamation
                        </button>
                    </div>
                </div>
            </div>
        }
    </div>
}

@code {
    private List<Article>? articles;
    private bool isLoading = true;
    private string? error;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var token = await JS.InvokeAsync<string>("localStorage.getItem", "authToken");
            if (string.IsNullOrEmpty(token))
            {
                error = "Authentication token not found. Please log in again.";
                return;
            }

            Http.DefaultRequestHeaders.Authorization =
                new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

            articles = await Http.GetFromJsonAsync<List<Article>>("api/articles");
        }
        catch (Exception ex)
        {
            error = "An error occurred while loading articles. Please try again.";
            Console.WriteLine($"Error loading articles: {ex}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private void CreateReclamation(int articleId)
    {
        NavigationManager.NavigateTo($"/reclamations/create?articleId={articleId}");
    }
} 