@page "/admin/reclamations/details/{Id:int}"
@inject HttpClient Http
@inject IJSRuntime JS
@inject NavigationManager NavigationManager
@inject AuthService AuthService
@using Shared.Models

<h3>Détails de la Réclamation</h3>

@if (isLoading)
{
    <p><em>Chargement...</em></p>
}
else if (error != null)
{
    <div class="alert alert-danger">
        @error
    </div>
}
else if (reclamation == null)
{
    <p>Réclamation non trouvée.</p>
}
else
{
    <div class="card">
        <div class="card-body">
            <h5 class="card-title">Réclamation #@reclamation.Id</h5>
            
            <div class="row mb-3">
                <div class="col-md-6">
                    <strong>Client:</strong> @reclamation.Client?.Username (@reclamation.Client?.Email)
                </div>
                <div class="col-md-6">
                    <strong>Date:</strong> @reclamation.DateReclamation.ToShortDateString()
                </div>
            </div>

            <div class="row mb-3">
                <div class="col-md-6">
                    <strong>Article:</strong> @reclamation.article?.Libelle
                </div>
                <div class="col-md-6">
                    <strong>État:</strong> @reclamation.Etat?.Libelle
                </div>
            </div>

            <div class="mb-3">
                <strong>Description:</strong>
                <p class="mt-2">@reclamation.Description</p>
            </div>

            @if (isResponsableSAV)
            {
                <div class="mb-3">
                    <strong>Changer l'état:</strong>
                    <select class="form-select mt-2" value="@reclamation.EtatId" @onchange="@(async (ChangeEventArgs e) => await UpdateEtat(e))">
                        @if (etats != null)
                        {
                            @foreach (var etat in etats)
                            {
                                <option value="@etat.Id">@etat.Libelle</option>
                            }
                        }
                    </select>
                </div>
            }

            <div class="mt-3">
                <button class="btn btn-secondary" @onclick="NavigateBack">Retour</button>
                @if (isResponsableSAV)
                {
                    <NavLink class="btn btn-warning" href="@($"/admin/reclamations/edit/{reclamation.Id}")">
                        Modifier
                    </NavLink>
                    <button class="btn btn-danger" @onclick="DeleteReclamation">Supprimer</button>
                }
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public int Id { get; set; }

    private Reclamation? reclamation;
    private List<Etat>? etats;
    private bool isLoading = true;
    private string? error;
    private bool isResponsableSAV;

    private void NavigateBack()

    {
        NavigationManager.NavigateTo("/adminreclamations");
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            isResponsableSAV = AuthService.Roles?.Contains("ResponsableSAV") ?? false;
            var token = await JS.InvokeAsync<string>("localStorage.getItem", "authToken");
            if (!string.IsNullOrEmpty(token))
            {
                Http.DefaultRequestHeaders.Authorization =
                    new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

                reclamation = await Http.GetFromJsonAsync<Reclamation>("api/reclamations/" + Id);
                if (isResponsableSAV)
                {
                    etats = await Http.GetFromJsonAsync<List<Etat>>("api/etats");
                }
            }
        }
        catch (Exception ex)
        {
            error = "Une erreur est survenue lors du chargement des détails. Veuillez réessayer. Détails: " + ex.Message;
            Console.WriteLine($"Error loading reclamation details: {ex}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task UpdateEtat(ChangeEventArgs e)
    {
        try
        {
            if (reclamation != null && int.TryParse(e.Value?.ToString(), out int newEtatId))
            {
                reclamation.EtatId = newEtatId;
                var response = await Http.PutAsJsonAsync("api/reclamations/" + Id, reclamation);
                if (!response.IsSuccessStatusCode)
                {
                    await JS.InvokeVoidAsync("alert", "Échec de la mise à jour de l'état.");
                }
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", "Une erreur est survenue lors de la mise à jour de l'état.");
            Console.WriteLine($"Error updating etat: {ex}");
        }
    }

    private async Task DeleteReclamation()
    {
        try
        {
            bool confirmed = await JS.InvokeAsync<bool>("confirm", "Voulez-vous vraiment supprimer cette réclamation ?");
            if (!confirmed) return;

            Console.WriteLine($"Attempting to delete reclamation with ID: {Id}");
            var response = await Http.DeleteAsync("api/reclamations/" + Id);
            Console.WriteLine($"Delete response status: {response.StatusCode}");

            if (response.IsSuccessStatusCode)
            {
                Console.WriteLine("Deletion successful, navigating to /adminreclamations");
                NavigationManager.NavigateTo("/adminreclamations");
            }
            else
            {
                await JS.InvokeVoidAsync("alert", "Échec de la suppression.");
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", "Une erreur est survenue lors de la suppression.");
            Console.WriteLine($"Error deleting reclamation: {ex}");
        }
    }
} 