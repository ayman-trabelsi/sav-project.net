@page "/admin/piecerechanges/edit/{Id:int}"
@using Shared.Models
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject IHttpClientFactory ClientFactory
@inject AuthService _authService

<h3>Edit Piece Rechange</h3>

@if (loading)
{
    <p><em>Loading...</em></p>
}
else if (piece == null)
{
    <p>Piece Rechange not found.</p>
    
}
else
{
    <EditForm Model="piece" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <label>Nom</label>
            <InputText class="form-control" @bind-Value="piece.Nom" />
        </div>
        <div class="mb-3">
            <label>Prix</label>
            <InputNumber class="form-control" @bind-Value="piece.Prix" />
        </div>
        <div class="mb-3">
            <label>Article</label>
            <select class="form-select" @bind="piece.ArticleId">
                <option value="">-- Select Article --</option>
                @foreach (var article in articles)
                {
                    <option value="@article.Id">@article.Libelle</option>
                }
            </select>
        </div>
        <div class="mb-3">
            <label>Image</label>
            <InputFile OnChange="HandleFileSelected" class="form-control" accept=".jpg,.jpeg,.png" />
            @if (!string.IsNullOrEmpty(piece.ImageUrl))
            {
                <div class="mt-2">
                    <img src="@piece.ImageUrl" alt="Piece rechange image" style="max-width: 200px; max-height: 200px;" />
                </div>
            }
        </div>

        <button class="btn btn-primary" type="submit">Save</button>
        <button class="btn btn-secondary ms-2" type="button" @onclick="Cancel">Cancel</button>
    </EditForm>
}

@code {
    [Parameter]
    public int Id { get; set; }

    private PieceRechange? piece;
    private List<Article> articles = new();
    private bool loading = true;
    private IBrowserFile? selectedFile;

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        selectedFile = e.File;
        if (selectedFile != null && piece != null)
        {
            // Convert the file to base64 for preview
            using var stream = selectedFile.OpenReadStream(maxAllowedSize: 10485760); // 10MB max
            using var ms = new MemoryStream();
            await stream.CopyToAsync(ms);
            var base64 = Convert.ToBase64String(ms.ToArray());
            piece.ImageUrl = $"data:{selectedFile.ContentType};base64,{base64}";
        }
    }

    private async Task<HttpClient> GetAuthorizedHttpClient()
    {
        var client = ClientFactory.CreateClient("AuthorizedClient");
        var token = await _authService.GetTokenAsync();

        if (!string.IsNullOrEmpty(token))
        {
            client.DefaultRequestHeaders.Authorization =
                new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
        }
        return client;
    }

    void Cancel()
    {
        Navigation.NavigateTo("/admin/piecerechanges");
    }

    protected override async Task OnInitializedAsync()
    {
        var client = await GetAuthorizedHttpClient();
        piece = await client.GetFromJsonAsync<PieceRechange>($"api/piecerechanges/{Id}");
        articles = await client.GetFromJsonAsync<List<Article>>("api/articles");
        loading = false;
    }

    private async Task HandleValidSubmit()
    {
        if (piece == null) return;

        var client = await GetAuthorizedHttpClient();

        // If there's a file selected, upload it first
        if (selectedFile != null)
        {
            var content = new MultipartFormDataContent();
            var fileContent = new StreamContent(selectedFile.OpenReadStream());
            content.Add(fileContent, "file", selectedFile.Name);

            var uploadResponse = await client.PostAsync("api/upload", content);
            if (uploadResponse.IsSuccessStatusCode)
            {
                piece.ImageUrl = await uploadResponse.Content.ReadAsStringAsync();
            }
        }

        var response = await client.PutAsJsonAsync($"api/piecerechanges/{Id}", piece);
        if (response.IsSuccessStatusCode)
        {
            Navigation.NavigateTo("/admin/piecerechanges");
        }
    }
} 