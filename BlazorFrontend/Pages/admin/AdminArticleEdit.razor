@page "/admin/articles/edit/{id:int}"
@inject NavigationManager Navigation
@inject IHttpClientFactory ClientFactory
@inject AuthService _authService
@inject IJSRuntime JS
@attribute [Authorize(Roles = "ResponsableSAV")]
@using Microsoft.AspNetCore.Authorization
@using Shared.Models

<h3>Modifier un Article</h3>

<EditForm Model="article" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label class="form-label">Libellé</label>
        <InputText class="form-control" @bind-Value="article.Libelle" />
    </div>
    <div class="mb-3">
        <label class="form-label">Prix</label>
        <InputNumber class="form-control" @bind-Value="article.Prix" />
    </div>
    <div class="mb-3 form-check">
        <InputCheckbox class="form-check-input" @bind-Value="article.EstSousGarantie" />
        <label class="form-check-label">Sous Garantie</label>
    </div>
    <div class="mb-3">
        <label class="form-label">Image</label>
        <InputFile OnChange="HandleFileSelected" class="form-control" accept=".jpg,.jpeg,.png" />
        @if (!string.IsNullOrEmpty(article.ImageUrl))
        {
            <div class="mt-2">
                <img src="@article.ImageUrl" alt="Article image" style="max-width: 200px; max-height: 200px;" />
            </div>
        }
    </div>

    <button type="submit" class="btn btn-primary">Sauvegarder</button>
    <button type="button" class="btn btn-secondary ms-2" @onclick="GoBack">Annuler</button>
</EditForm>

@code {
    [Parameter] public int id { get; set; }

    private Article article = new();
    private IBrowserFile? selectedFile;

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        selectedFile = e.File;
        if (selectedFile != null)
        {
            // Convert the file to base64 for preview
            using var stream = selectedFile.OpenReadStream(maxAllowedSize: 10485760); // 10MB max
            using var ms = new MemoryStream();
            await stream.CopyToAsync(ms);
            var base64 = Convert.ToBase64String(ms.ToArray());
            article.ImageUrl = $"data:{selectedFile.ContentType};base64,{base64}";
        }
    }

    private async Task<HttpClient> GetAuthorizedHttpClient()
    {
        var client = ClientFactory.CreateClient("AuthorizedClient");
        var token = await _authService.GetTokenAsync();

        if (!string.IsNullOrEmpty(token))
        {
            client.DefaultRequestHeaders.Authorization =
                new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
        }
        return client;
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var client = await GetAuthorizedHttpClient();
            var result = await client.GetFromJsonAsync<Article>($"api/articles/{id}");
            if (result != null)
            {
                article = result;
                Console.WriteLine($"Loaded article with ImageUrl: {article.ImageUrl}"); // Debug log
            }
            else
            {
                await JS.InvokeVoidAsync("alert", "Article non trouvé");
                Navigation.NavigateTo("/admin/articles");
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"Erreur lors du chargement de l'article: {ex.Message}");
            Navigation.NavigateTo("/admin/articles");
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            var client = await GetAuthorizedHttpClient();

            // If there's a file selected, upload it first
            if (selectedFile != null)
            {
                var content = new MultipartFormDataContent();
                var fileContent = new StreamContent(selectedFile.OpenReadStream());
                fileContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(selectedFile.ContentType);
                content.Add(fileContent, "file", selectedFile.Name);

                var uploadResponse = await client.PostAsync("api/upload", content);
                if (uploadResponse.IsSuccessStatusCode)
                {
                    var imageUrl = await uploadResponse.Content.ReadAsStringAsync();
                    article.ImageUrl = imageUrl.Trim('"'); // Remove any quotes from the response
                    Console.WriteLine($"New image URL after upload: {article.ImageUrl}"); // Debug log
                }
                else
                {
                    var error = await uploadResponse.Content.ReadAsStringAsync();
                    await JS.InvokeVoidAsync("alert", $"Erreur lors de l'upload de l'image: {error}");
                    return;
                }
            }

            Console.WriteLine($"Updating article with ImageUrl: {article.ImageUrl}"); // Debug log
            var response = await client.PutAsJsonAsync($"api/articles/{id}", article);
            if (response.IsSuccessStatusCode)
            {
                await JS.InvokeVoidAsync("alert", "Article mis à jour avec succès");
                Navigation.NavigateTo("/admin/articles");
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                await JS.InvokeVoidAsync("alert", $"Erreur lors de la mise à jour de l'article: {error}");
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"Une erreur est survenue: {ex.Message}");
        }
    }

    private void GoBack() => Navigation.NavigateTo("/admin/articles");
}
