@page "/admin/techniciens/edit/{Id:int}"
@using Shared.Models
@inject HttpClient Http
@inject NavigationManager Navigation

<h3>Edit Technicien</h3>

@if (loading)
{
    <p><em>Loading...</em></p>
}
else if (technicien == null)
{
    <p>Technicien not found.</p>
}
else
{
    <EditForm Model="technicien" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <label>Nom</label>
            <InputText class="form-control" @bind-Value="technicien.Nom" />
        </div>
        <div class="mb-3">
            <label>Email</label>
            <InputText class="form-control" @bind-Value="technicien.Email" />
        </div>
        <div class="mb-3">
            <label>Telephone</label>
            <InputText class="form-control" @bind-Value="technicien.Telephone" />
        </div>
        <div class="mb-3">
            <label>Specialite</label>
            <InputText class="form-control" @bind-Value="technicien.Specialite" />
        </div>

        <button class="btn btn-primary" type="submit">Save</button>
        <button class="btn btn-secondary ms-2" type="button" @onclick="Cancel">Cancel</button>
    </EditForm>
}

@code {
    [Parameter]
    public int Id { get; set; }

    private Technicien? technicien;
    private bool loading = true;

    void Cancel()
    {
        Navigation.NavigateTo("/admin/techniciens");
    }

    protected override async Task OnInitializedAsync()
    {
        technicien = await Http.GetFromJsonAsync<Technicien>($"api/techniciens/{Id}");
        loading = false;
    }

    private async Task HandleValidSubmit()
    {
        var response = await Http.PutAsJsonAsync($"api/techniciens/{Id}", technicien);
        if (response.IsSuccessStatusCode)
        {
            Navigation.NavigateTo("/admin/techniciens");
        }
    }
} 