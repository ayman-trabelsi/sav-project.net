@page "/admin/techniciens"
@using Shared.Models
@inject HttpClient Http
@inject NavigationManager Navigation

<h3>Techniciens</h3>

<p>
    <NavLink href="/admin/techniciens/create" class="btn btn-primary">Create New</NavLink>
</p>

@if (loading)
{
    <p><em>Loading...</em></p>
}
else if (techniciens == null || !techniciens.Any())
{
    <p>No techniciens found.</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Nom</th>
                <th>Email</th>
                <th>Telephone</th>
                <th>Specialite</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var technicien in techniciens)
            {
                <tr>
                    <td>@technicien.Nom</td>
                    <td>@technicien.Email</td>
                    <td>@technicien.Telephone</td>
                    <td>@technicien.Specialite</td>
                    <td>
                        <NavLink href="@($"/admin/techniciens/edit/{technicien.Id}")" class="btn btn-info btn-sm">Edit</NavLink>
                        <NavLink href="@($"/admin/techniciens/details/{technicien.Id}")" class="btn btn-primary btn-sm">Details</NavLink>
                        <button class="btn btn-danger btn-sm" @onclick="() => DeleteTechnicien(technicien.Id)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Technicien>? techniciens;
    private bool loading = true;

    protected override async Task OnInitializedAsync()
    {
        techniciens = await Http.GetFromJsonAsync<List<Technicien>>("api/techniciens");
        loading = false;
    }

    private async Task DeleteTechnicien(int id)
    {
        var response = await Http.DeleteAsync($"api/techniciens/{id}");
        if (response.IsSuccessStatusCode)
        {
            techniciens = await Http.GetFromJsonAsync<List<Technicien>>("api/techniciens");
        }
    }
} 